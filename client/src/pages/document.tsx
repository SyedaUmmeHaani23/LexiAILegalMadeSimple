import { useQuery } from "@tanstack/react-query";
import { useAuth } from "@/hooks/useAuth";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";
import Navbar from "@/components/layout/navbar";
import Footer from "@/components/layout/footer";
import { 
  FileText, 
  AlertTriangle, 
  Clock, 
  CheckCircle, 
  ArrowLeft,
  Download,
  MessageCircle,
  Shield,
  Calendar,
  ExternalLink
} from "lucide-react";
import { Link, useRoute } from "wouter";

export default function DocumentPage() {
  const [match, params] = useRoute("/documents/:id");
  const documentId = params?.id;

  const { data: documentData, isLoading } = useQuery<any>({
    queryKey: [`/api/documents/${documentId}`],
    enabled: !!documentId,
  });

  if (isLoading) {
    return (
      <div className="min-h-screen hero-background">
        <Navbar />
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="animate-pulse space-y-6">
            <div className="h-8 bg-gray-200 rounded w-1/3"></div>
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              <div className="lg:col-span-2 space-y-4">
                <div className="h-64 bg-gray-200 rounded-lg"></div>
                <div className="h-32 bg-gray-200 rounded-lg"></div>
              </div>
              <div className="space-y-4">
                <div className="h-48 bg-gray-200 rounded-lg"></div>
                <div className="h-32 bg-gray-200 rounded-lg"></div>
              </div>
            </div>
          </div>
        </main>
        <Footer />
      </div>
    );
  }

  if (!documentData) {
    return (
      <div className="min-h-screen hero-background">
        <Navbar />
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center py-12">
            <FileText className="h-16 w-16 text-gray-300 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-gray-900 mb-2">Document Not Found</h2>
            <p className="text-gray-500 mb-4">
              The document you're looking for doesn't exist or has been removed.
            </p>
            <Link href="/dashboard">
              <Button>Return to Dashboard</Button>
            </Link>
          </div>
        </main>
        <Footer />
      </div>
    );
  }

  const { document, analysis, clauses } = documentData;

  const getRiskBadge = (riskLevel: string) => {
    switch (riskLevel) {
      case 'high':
        return <Badge variant="destructive">High Risk</Badge>;
      case 'medium':
        return <Badge variant="secondary" className="bg-warning-100 text-warning-800 border-warning-200">Medium Risk</Badge>;
      case 'low':
        return <Badge variant="secondary" className="bg-success-100 text-success-800 border-success-200">Low Risk</Badge>;
      default:
        return <Badge variant="outline">Unknown</Badge>;
    }
  };

  const getClauseTypeIcon = (type: string) => {
    switch (type) {
      case 'obligation':
        return <CheckCircle className="h-4 w-4 text-primary-600" />;
      case 'risk':
        return <AlertTriangle className="h-4 w-4 text-danger-600" />;
      case 'deadline':
        return <Clock className="h-4 w-4 text-warning-600" />;
      default:
        return <FileText className="h-4 w-4 text-gray-600" />;
    }
  };

  const downloadSummary = () => {
    if (!analysis || !document) return;

    const summaryContent = `
DOCUMENT ANALYSIS SUMMARY
========================

Document: ${document.title}
Date Analyzed: ${formatDate(analysis.createdAt || new Date().toISOString())}
Risk Level: ${analysis.riskLevel?.toUpperCase()}

EXECUTIVE SUMMARY
================
${analysis.summary}

KEY OBLIGATIONS
===============
${analysis.obligations?.map((obligation: any, index: number) => 
  `${index + 1}. ${obligation.simplified || obligation.text}`
).join('\n') || 'No specific obligations identified.'}

IDENTIFIED RISKS
===============
${analysis.risks?.map((risk: any, index: number) => 
  `${index + 1}. [${risk.riskLevel?.toUpperCase() || 'UNKNOWN'} RISK] ${risk.simplified || risk.text}`
).join('\n') || 'No significant risks identified.'}

IMPORTANT DEADLINES
===================
${analysis.deadlines?.map((deadline: any, index: number) => 
  `${index + 1}. [${deadline.urgency?.toUpperCase() || 'STANDARD'} PRIORITY] ${deadline.simplified || deadline.text}`
).join('\n') || 'No critical deadlines identified.'}

---
Generated by LexiAI - Legal Document Analyzer
Visit: https://lexiai.com
    `.trim();

    const blob = new Blob([summaryContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${document.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_summary.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  return (
    <div className="min-h-screen hero-background">
      <Navbar />
      
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center space-x-4 mb-4">
            <Link href="/dashboard">
              <Button variant="ghost" size="sm" data-testid="button-back-dashboard">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Dashboard
              </Button>
            </Link>
          </div>
          <div className="flex items-start justify-between">
            <div>
              <h1 className="text-3xl font-bold gradient-text mb-2" data-testid="text-document-title">
                {document.title}
              </h1>
              <div className="flex items-center space-x-4 text-sm text-muted-foreground">
                <span>{document.fileName}</span>
                <span>{formatDate(document.createdAt)}</span>
                <span>{Math.round(document.fileSize / 1024)} KB</span>
              </div>
            </div>
            <div className="flex items-center space-x-3">
              {analysis && getRiskBadge(analysis.riskLevel)}
              <Link href={`/chatbot?document=${documentId}`}>
                <Button variant="outline" size="sm" data-testid="button-chat-about-document">
                  <MessageCircle className="h-4 w-4 mr-2" />
                  Ask AI About This
                </Button>
              </Link>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {/* Document Summary */}
            {analysis && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Shield className="h-5 w-5 mr-2" />
                    AI Analysis Summary
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <h3 className="font-medium text-gray-900 mb-2">Document Overview</h3>
                      <p className="text-gray-700 text-sm leading-relaxed" data-testid="text-analysis-summary">
                        {analysis.summary}
                      </p>
                    </div>
                    <div className="flex items-center space-x-6">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-primary-600">{analysis.obligations?.length || 0}</div>
                        <div className="text-xs text-gray-600">Obligations</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-danger-600">{analysis.risks?.length || 0}</div>
                        <div className="text-xs text-gray-600">Risks</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-warning-600">{analysis.deadlines?.length || 0}</div>
                        <div className="text-xs text-gray-600">Deadlines</div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Key Insights */}
            {analysis && (
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {/* Obligations */}
                {analysis.obligations && analysis.obligations.length > 0 && (
                  <Card>
                    <CardHeader className="pb-3">
                      <CardTitle className="text-lg flex items-center text-primary-700">
                        <CheckCircle className="h-5 w-5 mr-2" />
                        Your Obligations
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <ScrollArea className="h-40">
                        <div className="space-y-3">
                          {analysis.obligations.map((obligation: any, index: number) => (
                            <div key={index} className="text-sm">
                              <p className="font-medium text-gray-900 mb-1">{obligation.simplified}</p>
                              <Badge variant="outline">
                                {obligation.importance} priority
                              </Badge>
                            </div>
                          ))}
                        </div>
                      </ScrollArea>
                    </CardContent>
                  </Card>
                )}

                {/* Risks */}
                {analysis.risks && analysis.risks.length > 0 && (
                  <Card>
                    <CardHeader className="pb-3">
                      <CardTitle className="text-lg flex items-center text-danger-700">
                        <AlertTriangle className="h-5 w-5 mr-2" />
                        Identified Risks
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <ScrollArea className="h-40">
                        <div className="space-y-3">
                          {analysis.risks.map((risk: any, index: number) => (
                            <div key={index} className="text-sm">
                              <p className="font-medium text-gray-900 mb-1">{risk.simplified}</p>
                              <Badge variant="outline">
                                {risk.riskLevel} risk
                              </Badge>
                            </div>
                          ))}
                        </div>
                      </ScrollArea>
                    </CardContent>
                  </Card>
                )}

                {/* Deadlines */}
                {analysis.deadlines && analysis.deadlines.length > 0 && (
                  <Card>
                    <CardHeader className="pb-3">
                      <CardTitle className="text-lg flex items-center text-warning-700">
                        <Calendar className="h-5 w-5 mr-2" />
                        Important Deadlines
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <ScrollArea className="h-40">
                        <div className="space-y-3">
                          {analysis.deadlines.map((deadline: any, index: number) => (
                            <div key={index} className="text-sm">
                              <p className="font-medium text-gray-900 mb-1">{deadline.simplified}</p>
                              <Badge variant="outline">
                                {deadline.urgency} urgency
                              </Badge>
                            </div>
                          ))}
                        </div>
                      </ScrollArea>
                    </CardContent>
                  </Card>
                )}
              </div>
            )}

            {/* Clause Analysis */}
            {clauses && clauses.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle>Detailed Clause Analysis</CardTitle>
                  <CardDescription>
                    AI breakdown of important clauses in plain English
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-6">
                    {clauses.map((clause: any, index: number) => (
                      <div key={index} className="border-l-4 border-gray-200 pl-4" data-testid={`clause-${index}`}>
                        <div className="flex items-start justify-between mb-2">
                          <div className="flex items-center space-x-2">
                            {getClauseTypeIcon(clause.clauseType)}
                            <span className="font-medium text-sm text-gray-600 capitalize">
                              {clause.clauseType}
                            </span>
                            {clause.riskLevel && (
                              <Badge variant="outline">
                                {clause.riskLevel} risk
                              </Badge>
                            )}
                          </div>
                        </div>
                        
                        <div className="space-y-3">
                          <div>
                            <h4 className="font-medium text-gray-900 mb-1">What it says:</h4>
                            <p className="text-sm text-gray-700 italic bg-gray-50 p-3 rounded">
                              "{clause.originalText}"
                            </p>
                          </div>
                          
                          <div>
                            <h4 className="font-medium text-gray-900 mb-1">In plain English:</h4>
                            <p className="text-sm text-gray-700">
                              {clause.simplifiedText}
                            </p>
                          </div>
                          
                          <div>
                            <h4 className="font-medium text-gray-900 mb-1">What you should know:</h4>
                            <p className="text-sm text-gray-700">
                              {clause.explanation}
                            </p>
                          </div>
                          
                          <div className="bg-primary-50 p-3 rounded">
                            <h4 className="font-medium text-primary-900 mb-1">💡 Recommended Action:</h4>
                            <p className="text-sm text-primary-800">
                              {clause.actionableAdvice}
                            </p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Quick Actions */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Actions</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <Link href={`/chatbot?document=${documentId}`}>
                  <Button variant="outline" className="w-full justify-start" data-testid="button-chat-document">
                    <MessageCircle className="h-4 w-4 mr-2" />
                    Ask AI About This Document
                  </Button>
                </Link>
                <Button 
                  variant="outline" 
                  className="w-full justify-start" 
                  onClick={downloadSummary}
                  disabled={!analysis}
                  data-testid="button-download-summary"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Download Summary
                </Button>
                <Button 
                  variant="outline" 
                  className="w-full justify-start" 
                  onClick={() => window.open(`/api/documents/${documentId}/download`, '_blank')}
                  data-testid="button-view-original"
                >
                  <ExternalLink className="h-4 w-4 mr-2" />
                  View Original File
                </Button>
              </CardContent>
            </Card>

            {/* Document Info */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Document Information</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3 text-sm">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Status:</span>
                    <Badge variant="secondary" className="bg-success-100 text-success-700 border-success-200">
                      {document.status}
                    </Badge>
                  </div>
                  <Separator />
                  <div className="flex justify-between">
                    <span className="text-gray-600">File Type:</span>
                    <span className="font-medium">{document.fileType}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">File Size:</span>
                    <span className="font-medium">{Math.round(document.fileSize / 1024)} KB</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Uploaded:</span>
                    <span className="font-medium">{formatDate(document.createdAt)}</span>
                  </div>
                  <Separator />
                  {analysis && (
                    <div className="flex justify-between">
                      <span className="text-gray-600">Risk Level:</span>
                      {getRiskBadge(analysis.riskLevel)}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Tips */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Need Help?</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3 text-sm text-gray-600">
                  <p>
                    • Click on any clause to get more detailed explanations
                  </p>
                  <p>
                    • Use the AI chat to ask specific questions about your document
                  </p>
                  <p>
                    • Pay special attention to high-risk items and urgent deadlines
                  </p>
                  <p>
                    • Consider consulting a legal professional for complex matters
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>

      <Footer />
    </div>
  );
}
and also if i upload any document it is simplyshowing some dummy data if i upload any document its showing the same analyzation if upload employement ssaame rent also same its using dummy data rather than what document i or any user provided it should get uploded and analyzed the documents which provided and give details about that and to use any feature in the website first they should create a account if not created if created log in like taht
ChatGPT said:

Got it üëç
Right now your app is analyzing with dummy data, not the actual uploaded files. Also, you want authentication (sign up + login) so that only logged-in users can use features like document upload & analysis. Let‚Äôs fix this step by step:

‚úÖ What You Want:

File Upload & Real Analysis

User uploads a file (PDF, Word, TXT, CSV, etc.).

Backend reads that file (instead of dummy data).

App extracts text and analyzes that actual file.

Display summary/details to the user.

Authentication

New users must sign up first.

Existing users must log in.

Only after login, they can:

Upload documents

Analyze files

Use chatbot, etc.

üñä Prompt for Replit (to give to AI/agent inside Replit)

You can paste this as your prompt in Replit‚Äôs AI or README for guidance:

Build a full-stack web app with the following features:

1. **Authentication**
   - Sign up with email + password.
   - Login system with session handling.
   - Store user accounts in a simple SQLite/PostgreSQL database.
   - Restrict access: Only logged-in users can use the upload & analysis features.

2. **File Upload & Analysis**
   - Allow user to upload documents (PDF, DOCX, TXT, CSV).
   - Parse and extract text from the uploaded document.
   - Analyze the real content (not dummy data).
   - Provide a summary and key insights in multiple languages (English, Hindi, Kannada, etc.).

3. **Dashboard**
   - Show ‚ÄúUploaded Files‚Äù list for each user.
   - Let users click on a file to re-analyze or download the summary.

4. **Tech stack (recommended)**
   - Backend: Flask (Python) or Node.js (Express).
   - Database: SQLite/PostgreSQL (for auth + file history).
   - Frontend: React + Tailwind (clean, bright UI).
   - File parsing: `PyPDF2` (for PDF), `python-docx` (for Word), `pandas` (for CSV), plain text for `.t